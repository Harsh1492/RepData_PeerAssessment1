{
    "contents" : "## Reproductible Research\nby Roger D. Peng, PhD, Jeff Leek, PhD, Brian Caffo, PhD\nCoursera June 2014 session \n\n### Assignement 1\nhttps://github.com/coursera-jm/RepData_PeerAssessment1\n\n## Introduction\n\nWe want first ensure, as per instructions, that all statement will be outputs. \n```{r setup, echo=TRUE}\n# set global options\nopts_chunk$set(echo=TRUE)\n```\n\nWe also initalize some common variables:\n```{r init}\n# cleanup\nrm(list=ls())\n\n#libraries\nlibrary(lattice)\n\n# for reproductibility\nset.seed(590607)\n\n# some usefule variables\ndt = Sys.time()\ndate <- format(dt,\"%d-%b-%Y\")\ntime <- format(dt,\"%H:%M:%S\")\n\nRversion <- version$version.string\n```\n\nThis analysis has been performed using R software package for statistical analysis.\nThe version of R used was `r Rversion`.\n\nThis socument has been generated on `r date` at `r time`.\n\n## Analysis as per assignement\n\n### 1. Loading and preprocessing the data\n\n  - Show any code that is needed to load the data\n\nWe download the dataset from the internet and unzip it. Then, we used read.csv to read the file.\n\n```{r loadData}\n\n# baseDir will be prefixing all data accesses\nbaseDir <- \".\"\n\n# create data sub-directory if necessary\ndataDir <- file.path(baseDir, \"data\")\nif(!file.exists(dataDir)) { dir.create(dataDir) }\n\nzipFilePath <- file.path(dataDir, \"activity.zip\")\ndateFilePath <- file.path(dataDir, \"date_time_downloaded.txt\")\n# download original data if necessary (skip if exists already as it takes time and bandwith)\nif(!file.exists(zipFilePath)) { \n  zipFileUrl <- \"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip\"\n  download.file (zipFileUrl, zipFilePath, method=\"curl\")\n  DTDownloaded <- format(Sys.time(), \"%Y-%b-%d %H:%M:%S\")\n  cat (DTDownloaded, file=dateFilePath)\n} else {\n  DTDownloaded <- scan(file=dateFilePath, what=\"character\", sep=\"\\n\")\n}\n\nfilePath <- file.path(dataDir, \"activity.csv\")\n# unzip file if necessary\nif(!file.exists(filePath)) { \n  unzip (zipFilePath, exdir=dataDir)\n}\n\n# read dataset and load data in R\ndataset <- read.csv(filePath, header = TRUE) \n\ncat (\"The dataset is located at\", filePath, \"and was downloaded on downloaded on\", DTDownloaded)\n```\n\nWe verify the dataset structure:\n```{r strDataset}\nstr(dataset)\n```\n\nThe variables included in this dataset are:\n\n    - steps: Number of steps taking in a 5-minute interval (missing values are coded as NA)\n    - date: The date on which the measurement was taken in YYYY-MM-DD format\n    - interval: Identifier for the 5-minute interval in which measurement was taken\n\nThe dataset is stored in a comma-separated-value (CSV) file and there are a total of ```r nrow(dataset)``` observations in this dataset for 17,568 expected from the instructions.\n\n- Process/transform the data (if necessary) into a format suitable for your analysis\n\na. Let's get dates instead of character strings\n```{r processData1}\ndataset$date <- as.Date(dataset$date)\nstr(dataset$date)\n```\n\nb. Interval are a number in the form hhmm where hh=hours and mm= minutes. We create 2 variables: time since minght, in minutes, and a string factor instead of the numeric concatenation of hours and minutes.\n```{r processData2}\ndataset$minute <- dataset$interval %% 100\ndataset$hour <- dataset$interval %/% 100\ndataset$elapsed <- dataset$hour * 60 + dataset$minute\n# replace interval by a factor\ndataset$interval <- as.factor(sprintf(\"%02d:%02d\", dataset$hour, dataset$minute))\n```\n\n```{r processData3}\n# create a table with number of steps per day\nstepsPerDay <- aggregate(steps ~ date, data=dataset, sum)\n```\n\n### 2. What is mean total number of steps taken per day?\n\nFor this part of the assignment, you can ignore the missing values in the dataset.\n\n  - Make a histogram of the total number of steps taken each day\n```{r histogramSteps, fig.height=6, fig.width=10}\nhistogram(stepsPerDay$steps, breaks=10, main=\"Total number of steps per day\", xlab=\"Steps per day\")\n```\n\n  - Calculate and report the mean and median total number of steps taken per day\n\nThe mean and median number of steps per days are as follow:\n```{r meanMedianSteps}\nmean(stepsPerDay$steps, na.rm=TRUE)\nmedian(stepsPerDay$steps, na.rm=TRUE)\n```\n\n### What is the average daily activity pattern?\n\n1. Make a time series plot (i.e. type = \"l\") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)\n```{r timeSeriesPlot, fig.height=6, fig.width=10}\nplot(interval ~ steps, data=dataset, type=\"l\")\n```\n\n\n2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?\n```{r modeInterval}\n# mode, e.g. http://stackoverflow.com/questions/2547402/standard-library-function-in-r-for-finding-the-mode\nMode <- function(x) {\n  ux <- unique(x)\n  ux[which.max(tabulate(match(x, ux)))]\n}\nMode(dataset$interval)\n```\n\n### Imputing missing values\n\nNote that there are a number of days/intervals where there are missing values (coded as NA). The presence of missing days may introduce bias into some calculations or summaries of the data.\n\n1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)\n```{r calculateMissings}\nsum(is.na(dataset$steps))\n```\n\n2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.\n```{r estimateMissings}\n# calculate the mean for each day from other days\nmeanPerDay <- aggregate(steps ~ date, data=dataset, mean)\n```\n\n3. Create a new dataset that is equal to the original dataset but with the missing data filled in.\n```{r datasetMissings}\n# replace missig values w\nfor(r in 1:100) { #nrow(dataset)){\n  if (is.na(dataset$steps[r])) {\n    repl <- meanPerDay$steps[meanPerDay$date == dataset$date[r]];\n    cat (r, repl, dataset$date[r], \"\\n\");\n    #dataset$steps[r] <- repl;\n  }\n}\nstr(dataset$steps)\n```\n\n4. Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?\n```{r histogramMissingsEstimated}\nhistogram(stepsPerDay$steps, breaks=10, main=\"Total number of steps per day\", xlab=\"Steps per day\")\nstepsPerDay <- aggregate(steps ~ date, data=dataset, sum)\nmean(stepsPerDay$steps, na.rm=TRUE)\nmedian(stepsPerDay$steps, na.rm=TRUE)\n```\n\n3. Make a time series plot (i.e. type = \"l\") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)\n```{r timeSeriesPlotMissingsEstimated, fig.height=8, fig.width=12}\nplotxy(dataset$steps ~ dataset$interval,type=\"l\")\n```\n\n### Are there differences in activity patterns between weekdays and weekends?\n\nFor this part the \"weekdays()\" function may be of some help here. Use the dataset with the filled-in missing values for this part.\n\n1. Create a new factor variable in the dataset with two levels -- \"weekday\" and \"weekend\" indicating whether a given date is a weekday or weekend day.\n```{r createWeekDayWeekEndFactor}\ndataset$day <-\"weekday\"\ndataset$day[weekdays(as.Date(dataset$date), abb=T) %in% c(\"Sat\",\"Sun\")] <- \"weekend\"\n```\n\n\n2. Make a panel plot containing a time series plot (i.e. type = \"l\") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis).\n```{r timeSeriesPlotMissingsEstimatedWeekDayWeekEnd, fig.height=8, fig.width=12}\nintervalDay <- aggregate(steps ~ interval + day, data=dataset, mean)\nplot(steps ~ interval, data=intervalDay, type=\"l\")\nplot(steps ~ day, data=intervalDay, type=\"l\")\n```\ntable(intervalDay)\n\n## References\n\n1. R Core Team. R: A language and environment for statistical computing. URL: http://www.R-project.org. R Foundation for Statistical Computing, 2013.\n\n2. R Markdown Page. URL: http://www.rstudio.com/ide/docs/authoring/using_markdown. \n\n\n",
    "created" : 1402595013729.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1519759090",
    "id" : "C75157FC",
    "lastKnownWriteTime" : 1402628567,
    "path" : "~/coursera/coursera-data-science/reproductible-research/RepData_PeerAssessment1/PA1_template.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}